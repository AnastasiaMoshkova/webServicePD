import cv2
import base64
import numpy as np
import time
import os
from fastapi import APIRouter, WebSocket, WebSocketDisconnect, Request
from fastapi.responses import JSONResponse
import HandTrackingModule as htm  # —Ç–≤–æ–π –º–æ–¥—É–ª—å
from core.templates import templates
import asyncio

router = APIRouter()

# –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
recording = False
out = None
output_file = None
wCam, hCam = 640, 480


@router.get("/hand_tracking")
def home(request: Request):
    return templates.TemplateResponse("hand_tracking.html", {"request": request})


@router.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    global recording, out, output_file
    await websocket.accept()
    print("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")
    detector = htm.handDetector(detectionCon=0.7)

    try:
        while True:
            data = await websocket.receive_text()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –ø—É—Å—Ç–∞—è –ª–∏ —Å—Ç—Ä–æ–∫–∞
            if not data or len(data) == 0:
                print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞")
                continue

            try:
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
                img_bytes = base64.b64decode(
                    data, validate=True
                )  # validate=True ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base64: {e}")
                continue

            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –ø—É—Å—Ç—ã–µ –ª–∏ –±–∞–π—Ç—ã
            if len(img_bytes) == 0:
                print("‚ö†Ô∏è –ü—É—Å—Ç—ã–µ –±–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                continue

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy
            np_arr = np.frombuffer(img_bytes, np.uint8)
            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ –º–∞—Å—Å–∏–≤
            if np_arr.size == 0:
                print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π numpy –º–∞—Å—Å–∏–≤")
                continue

            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            frame = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)
            if frame is None:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–±–∏—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ)")
                continue

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ MediaPipe
            frame = detector.findHands(frame)
            lmList = detector.findPosition(frame, draw=True)

            # –ü—Ä–∏–º–µ—Ä: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–º –∏ –±–æ–ª—å—à–∏–º –ø–∞–ª—å—Ü–∞–º–∏
            if len(lmList) >= 9:
                x1, y1 = lmList[4][1], lmList[4][2]
                x2, y2 = lmList[8][1], lmList[8][2]
                length = int(((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5)
                cv2.putText(
                    frame,
                    f"Dist: {length}px",
                    (30, 80),
                    cv2.FONT_HERSHEY_SIMPLEX,
                    1,
                    (0, 255, 0),
                    2,
                )

            # –ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ
            if recording and out is not None:
                out.write(frame)

            # –ö–æ–¥–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            success, buffer = cv2.imencode(".jpg", frame, [cv2.IMWRITE_JPEG_QUALITY, 70])
            if not success:
                continue

            jpg_as_text = "data:image/jpeg;base64," + base64.b64encode(buffer).decode("utf-8")
            await websocket.send_text(jpg_as_text)

    except WebSocketDisconnect:
        print("üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ WebSocket: {e}")
    finally:
        if out is not None:
            out.release()
            out = None
        recording = False


@router.post("/start_record")
async def start_record():
    """–ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏"""
    global recording, out, output_file
    if recording:
        return JSONResponse({"status": "already recording"})

    os.makedirs("recordings", exist_ok=True)
    timestamp = time.strftime("%Y%m%d_%H%M%S")
    output_file = f"recordings/hand_tracking_{timestamp}.avi"
    fourcc = cv2.VideoWriter_fourcc(*"XVID")
    out = cv2.VideoWriter(output_file, fourcc, 20.0, (wCam, hCam))
    recording = True
    return JSONResponse({"status": "started"})


@router.post("/stop_record")
async def stop_record():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏"""
    global recording, out, output_file
    recording = False
    if out is not None:
        out.release()
        out = None
    saved_file = output_file
    output_file = None
    return JSONResponse({"status": "stopped", "saved_file": saved_file})
